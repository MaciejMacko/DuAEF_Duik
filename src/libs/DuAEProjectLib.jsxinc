/**
	* After Effects project methods
	* @namespace
	* @memberof DuAEF.DuAE
*/
DuAEF.DuAE.Project = {};

//undocumented flags
DuAEF.DuAE.Project.progressMode = false;
DuAEF.DuAE.Project.activeComp = null;
DuAEF.DuAE.Project.progressComp = null;
DuAEF.DuAE.Project.viewerMaximized = false;

/**
 * Sets the project in "waiting mode" to speed up things.
 * @param {bool} inProgress - True to set progress mode, false to stop it.
*/
DuAEF.DuAE.Project.setProgressMode = function(inProgress)
{
	if (inProgress && DuAEF.DuAE.Project.progressMode) return;
	if (!inProgress && !DuAEF.DuAE.Project.progressMode) return;

	if (inProgress)
	{
		//store the current comp
		DuAEF.DuAE.Project.activeComp = DuAEF.DuAE.Project.getActiveComp();

		if (app.activeViewer != null) DuAEF.DuAE.Project.viewerMaximized = app.activeViewer.maximized;

		//create a temp comp, open it
		DuAEF.DuAE.Project.progressComp = app.project.items.addComp("MAGIC IS HAPPENING...", 500, 500, 1, 1, 1);

		var tempL = DuAEF.DuAE.Project.progressComp.layers.addShape();
		tempL.applyPreset(DuAEF.DuBinary.toFile(duaef_magic));
		tempL.selected = false;

		DuAEF.DuAE.Project.progressComp.openInViewer();
		if (app.activeViewer != null) app.activeViewer.maximized = true;

		DuAEF.DuAE.Project.progressMode = true;
	}
	else
	{
		//remove temp comp
		if (DuAEF.DuAE.Project.progressComp != null) DuAEF.DuAE.Project.progressComp.remove();
		//re-activate previous comp
		if (DuAEF.DuAE.Project.activeComp != null) DuAEF.DuAE.Project.activeComp.openInViewer();
		if (app.activeViewer != null) app.activeViewer.maximized = DuAEF.DuAE.Project.viewerMaximized;

		DuAEF.DuAE.Project.progressMode = false;
	}

}

/**
	* Gets all compositions in the project
	* @return {CompItem[]} The compositions
*/
DuAEF.DuAE.Project.getComps = function()
{
	var comps = [];
	var it = new Iterator(app.project.items);
	it.do(function(comp)
	{
		if (comp instanceof CompItem) comps.push(comp);
	});
	return comps;
}

/**
	* Gets the After Effects current composition
	* @return {CompItem|null} The current composition or null if there's no current comp
*/
DuAEF.DuAE.Project.getActiveComp = function()
{
	if (DuAEF.DuAE.Project.progressMode) return DuAEF.DuAE.Project.activeComp;
	var comp = app.project.activeItem;
	if (!comp) return null;
	if (!(comp instanceof CompItem)) return null;
	return comp;
}

/**
	* Retrieves an item by its Item ID
	* @return {Item|null} The item
*/
DuAEF.DuAE.Project.getItemById = function (id)
{

	var it = new Iterator(app.project.items);
	while(item = it.next())
	{
		if (item.id == id) return item;
	}
	return null;
}

/**
	* Generates a new unique name for a composition
	* @param {string} newName - The wanted new name
	* @param {CompItem} comp  - The comp
	* @param {boolean} [increment=true] - true to automatically increment the new name if it already ends with a digit
	* @return {string}	The unique name, with a new number at the end if needed.
*/
DuAEF.DuAE.Project.newUniqueCompName = function(newName, increment)
{
	if (typeof increment == 'undefined') increment = true;
	var compNames = [];
	var it = new Iterator(app.project.items);
	it.do(function(comp)
	{
		if (comp instanceof CompItem) compNames.push(comp.name);
	});
	return DuAEF.DuJS.String.generateUnique(newName,compNames,increment);
}

/**
 * Makes sure all compositions in the project have unique names, renaming them if needed.
*/
DuAEF.DuAE.Project.setUniqueCompNames = function()
{
	var comps = DuAEF.DuAE.Project.getComps();
	var it = new Iterator(app.project.items);
	it.do(function(comp)
	{
		//temporarily set another name to correctly generate a new unique name 
		var newName = comp.name;
		comp.name = '***Duik-temp-name-xxx***';
		comp.name = DuAEF.DuAE.Project.newUniqueCompName(newName);
	});
}

/**
 * Gets all the colors found in the project
 * @param {boolean} [selectedOnly=false] - true to search only in selected compositions.
 * @return {PropertyInfo[]} The color properties
 */
DuAEF.DuAE.Project.getColors = function(selectedOnly)
{
	if (typeof selectedOnly === 'undefined') selectedOnly = false;
	var comps = [];
	if (selectedOnly) comps = app.project.selection;
	else comps = app.project.items;

	var colors  = [];

	new Iterator(comps).do(function (comp)
	{
		if (comp instanceof CompItem)
		{
			colors = colors.concat( DuAEF.DuAE.Comp.getColors(comp, false, false));
		}
	});

	return colors;
}

/**
 * Replaces a color in the project
 * @param {float[]} oldColor - The color to replace, in the form [R,V,B,A] where the colors are float in the range 0.0 - 1.0
 * @param {float[]} newColor - The new color, in the form [R,V,B,A] where the colors are float in the range 0.0 - 1.0
 * @param {boolean} [selectedOnly=false] - true to search only in selected compositions.
 * @return {int} The number of colors replaced
 */
DuAEF.DuAE.Project.replaceColor = function(oldColor , newColor , selectedOnly)
{
	if (typeof selectedOnly === 'undefined') selectedOnly = false;

	var comps = [];
	if (selectedOnly) comps = app.project.selectedItems;
	else comps = app.project.items;

	var colors  = [];

	new Iterator(comps).do(function (comp)
	{
		if (comp instanceof CompItem)
		{
			DuAEF.DuAE.Comp.replaceColor(oldColor, newColor , comp, false, false);
		}
	});

	return colors;
}